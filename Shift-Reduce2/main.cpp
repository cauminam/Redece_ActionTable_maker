//
//  main.cpp
//  Shift-Reduce2
//
//  Created by 양준식 on 2020/06/05.
//  Copyright © 2020 양준식. All rights reserved.
//

#include <iostream>
using namespace std;
#include <vector>
#include <string>
#include <map>
#include "DFAstateInfo.h"
#include "FollowSet.h"

//Non-Terminal(16개)={ S 0,CODE 1, VDECL 2, ASSIGN 3, FDECL 4, ARG 5, MOREARGS 6, BLOCK 7, STMT 8, ELSE 9,RHS 10, EXPR 11, TERM 12 , FACTOR 13, COND 14, RETURN 15 }이 차례로 0번부터 14번의 Non-terminal이라고 하자.

// dfa가 갖고있는 reduce가 가능한 nfa state number들을 받아오면, 이 map을 이용하여, 해당 item number가 reduce되기 위해서 어떤 Non-terminal번호가 필요한 지, 그 숫자를 반환해줄 수 있는 맵. 33개의 쌍이 있어야 함.
map<int, int> item_to_NonT_num={ {1,0},{4,1},{7,1},{12,2},{16,2},{20,3},{30,4},{34,5},{40,6},{44,7},{47,8},{50,8},{59,8},{67,8},{79,8},{84,9},{87,10},{89,10},{93,11},{95,11},{99,12},{101,12},{105,13},{107,13},{109,13},{111,13},{115,14},{119,15},{8,1},{35,5},{41,6},{45,7},{85,9}  };


// reduce 될 수 있는 nfa state number 즉, item number에 대하여  해당 아이템을 가진 dfa state가 reduce된다면, 어떤 production으로 reduce가 되는지, 그 production의 번호를 알려주는 맵. 0~32번의 프로덕션 넘버 모두 하나씩 대응됨.
//0번이 s->CODE.  1번이 CODE->VDECL CODE. .......
map<int,int> r_produc_num={ {1,0},{4,1},{7,2},{12,4},{16,5},{20,6},{30,7},{34,8},{40,10},{44,12},{47,14},{50,15},{59,16},{67,17},{79,18},{84,19},{87,21},{89,22},{93,23},{95,24},{99,25},{101,26},{105,27},{107,28},{109,29},{111,30},{115,31},{119,32},{8,3},{35,9},{41,11},{45,13},{85,20}   };

map<string,int> terminalNumberMap={
    {"vtype",0},{"num",1},{"float",2},{"literal",3},{"id",4},{"if",5},{"else",6},{"while",7},{"for",8},{"return",9},{"addsub",10},{"multdiv",11},{"assign",12},{"comp",13},{"semi",14},{"comma",15},{"lparen",16},{"rparen",17},{"lbrace",18},{"rbrace",19},{"$",20}
    
};


int main(int argc, const char * argv[]) {
    
    int R_possible_nfa_num[33]={
        1,4,7,12,16,20,30,34,40,44,47,50,59,67,79,84,87,89,93,95,99,101,105,107,109,111,115,119,8,35,41,45,85};//8,35,41,45,85
    //W->a.으로 이동하는 item, 즉 nfa의 state number들이다. 각 dfa state에 대하여 갖고있는 item들 중 이 배열에 있는 숫자가 있다면,  해당 Non-terminal에 대한 Follow set을 불러오고 SLR table에 써줄 것이다.
    //이 배열의 숫자들은 각각의 reduce되어야 하는 Non-terminal, 즉, X->a.에서 X가 정해져있으므로 이는 map자료구조를 이용하여 맵핑할 것.
    //또한, 해당 nfa-state number로 reduce가 된다면, 몇번 production으로 reduce가 되는지에 대한 production번호도 map으로 맵핑
    
    
  string SLR_action[85][21]={
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"},
      {"n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n"}
  
  };
    
    int temp;
     int temp2; // 해당 X의 번호
    vector<int> followvec;
    int prod_num;
    string prod_num_s;
    
    
    //본격적인 코드 부분
    
    
    
    for(int i=0;i<DFAstateInfo.size();i++){//85개
         temp=200; //겹치는 nfa state들, 즉 reduce가능한 nfa state를 dfa가 갖고있다면, 그 번호들을 저장할 장소
        //검산해보니 dfa state들은 이러한 nfa  state번호를 단 한개 갖거나 갖지않는 것으로 판명되어, 변수 하나로!!
        //200은 그냥 바뀌지 않은 상태이면 200 그대로 갖고있으라고 넣어놓은것
        for(int j=0;j<DFAstateInfo[i].size();j++){
            for(int k=0;k<33;k++){//R_possible_nfa_num의 크기 33
                if(DFAstateInfo[i][j]==R_possible_nfa_num[k]){ //같은게 있으면 추가해놓음.
                    temp=R_possible_nfa_num[k];//배열에서 갖고오는게 조금이나마 더 효율적.
                    break;
                }
            }
        }
        
       if(temp==200){//겹치는 번호가 없어서 temp가 바뀌지 않은 경우. 다음 회차로 넘어감
                  continue;
              }
        //그럼이제  가져온  nfa state 번호에 대하여 X->a.에서 X가 뭔지 알아내야 됨 item_to_NonT_num 맵을 이용해 해당 X의 번호를 가져온다. Non-terminal들은 0번부터 14번까지 총 15개이다.
        
       
        temp2=item_to_NonT_num[temp];//해당 item 으로 reduce하려면 어떤 Non-terminal에 대한 것인지 그 논터미널번호를 의미
        
        followvec=FollowSet[temp2]; //얘가, 필요한 x에 대한 follow set 모음이다.(int 형 벡터)
        
        prod_num=r_produc_num[temp];//얘가,해당 item(X->a.)에 대한 reduce할 떄의 production 번호다.
        prod_num_s=to_string(prod_num);
        
        for(int m=0;m<followvec.size();m++){
            SLR_action[i][followvec[m]]="R("+prod_num_s+")";
        }
        
    }
  
    
    
    
    
    
    for(int n=0;n<85;n++){//만든 배열 출력하는 부분
        //cout<<"{ ";
        for(int o=0;o<21;o++){
            cout<<SLR_action[n][o];
            if(o!=20){
                cout<<" , ";
            }
        }cout<<endl;
    }
    
    
    
    
    
    
}
